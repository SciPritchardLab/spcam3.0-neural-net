! interface for super-parameterization

module super_cup

use grid, only : nx, ny, nzm

implicit none
include 'crmdims.inc'

PRIVATE

integer, parameter :: plev = nzm+2
integer, parameter :: pcols = nx*ny
integer, parameter :: r8 = 8

real(r8) u_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) v_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) w_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) t_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) q_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) qn_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) qp_crm(crm_nx, crm_ny, crm_nz, pcols)
real(r8) rad_crm(crm_nx, crm_ny, crm_nz, pcols)

public :: super_init, super

CONTAINS


subroutine super_init()

use vars

implicit none
integer i,j,k,ncol


do j=1,ny
  do i=1,nx
    ncol = i+nx*(j-1)
    do k=1,crm_nz
      u_crm(:,:,k,ncol) = u(i,j,k)
      v_crm(:,:,k,ncol) = v(i,j,k)
      w_crm(:,:,k,ncol) = 0.
      t_crm(:,:,k,ncol) = tabs(i,j,k)
      q_crm(:,:,k,ncol) = q(i,j,k)
      qn_crm(:,:,k,ncol) = qn(i,j,k)
      qp_crm(:,:,k,ncol) = 0.
      rad_crm(:,:,k,ncol) = 0.
    end do
  end do
end do

end subroutine super_init


subroutine super()

use vars
use params


integer :: lchnk    ! chunk identifier
integer :: icol     ! column identifier
real(r8) :: ps ! Global grid surface pressure (Pa)
real(r8) :: pmid(plev) ! Global grid pressure (Pa)
real(r8) :: pint(plev+1) ! Global grid pressure (Pa)
real(r8) :: pdel(plev) ! Layer's pressure thickness (Pa)
real(r8) :: rpdel(plev) ! reciprocal of pdel
real(r8) :: lnpint(plev+1) ! 
real(r8) :: lnpdel(plev) ! 
real(r8) :: phis ! Global grid surface geopotential (m2/s2)
real(r8) :: zmid(plev) ! Global grid height (m)
real(r8) :: zint(plev+1)! Global grid interface height (m)
real(r8) :: dt_gl ! global model's time step
real(r8) :: qrs_crm(crm_nx, crm_ny, crm_nz) ! CRM SW rad. heating
real(r8) :: qrl_crm(crm_nx, crm_ny, crm_nz) ! CRM LW rad. heating
real(r8) :: fsds_crm(crm_nx,crm_ny)   ! downward solar flux at surface
real(r8) :: fsns_crm(crm_nx,crm_ny)   ! Surface solar absorbed flux
real(r8) :: fsdsc_crm(crm_nx,crm_ny)  ! Clearsky downward solar flux at surface
real(r8) :: fsnt_crm(crm_nx,crm_ny)   ! Net downard solar flux at top of atmosphere
real(r8) :: fsntc_crm(crm_nx,crm_ny)  ! Clearsky net solar flux at TOA
real(r8) :: fsut_crm(crm_nx,crm_ny)   ! Upwelling Shortwave Flux at TOA
real(r8) :: flwds_crm(crm_nx,crm_ny)  ! Surface longwave down flux
real(r8) :: flns_crm(crm_nx,crm_ny)   ! Srf longwave cooling (up-down) flux
real(r8) :: flnsc_crm(crm_nx,crm_ny)  ! Clearsky srf longwave cooling (up-down) flux
real(r8) :: flut_crm(crm_nx,crm_ny)   ! Outgoing lw flux at model top
real(r8) :: flutc_crm(crm_nx,crm_ny)  ! Clearsky outgoing lw flux at model top
integer  :: nbreak ! number of subcyclings
real(r8) :: ocnfrac ! area fraction of the ocean
real(r8) :: wnd  ! large-scale surface wind (m/s)
real(r8) :: tau00  ! large-scale surface stress (N/m2)
real(r8) :: bflxls  ! large-scale surface buoyancy flux (K m/s)
real(r8) :: taux_crm  ! zonal CRM surface stress perturbation (N/m2)
real(r8) :: tauy_crm  ! merid CRM surface stress perturbation (N/m2)
real(r8) :: z0m ! surface stress (N/m2)
real(r8) :: timing_factor ! crm cpu efficiency

real(r8) :: tl(plev) ! Global grid temperature (K)
real(r8) :: ql(plev) ! Global grid water vapor (g/g)
real(r8) :: qcl(plev)! Global grid cloud liquid water (g/g)
real(r8) :: qci(plev)! Global grid cloud ice (g/g)
real(r8) :: ul(plev) ! Global grid u (m/s)
real(r8) :: vl(plev) ! Global grid v (m/s)
real(r8) :: qc_crm (crm_nx, crm_ny, crm_nz)! CRM cloud water
real(r8) :: qi_crm (crm_nx, crm_ny, crm_nz)! CRM cloud ice
real(r8) :: qpc_crm(crm_nx, crm_ny, crm_nz)! CRM precip water
real(r8) :: qpi_crm(crm_nx, crm_ny, crm_nz)! CRM precip ice
real(r8) :: prec_crm(crm_nx, crm_ny)! CRM precipiation rate
logical  :: doinitial ! initialize run

real(r8) :: sltend(plev) ! tendency of static energy
real(r8) :: qltend(plev) ! tendency of water vapor
real(r8) :: qcltend(plev)! tendency of cloud liquid water
real(r8) :: qcitend(plev)! tendency of cloud ice
real(r8) :: t_rad (crm_nx, crm_ny, crm_nz) ! rad temperuture
real(r8) :: qv_rad(crm_nx, crm_ny, crm_nz) ! rad vapor
real(r8) :: qc_rad(crm_nx, crm_ny, crm_nz) ! rad cloud water
real(r8) :: qi_rad(crm_nx, crm_ny, crm_nz) ! rad cloud ice
real(r8) :: precc ! convective precip rate (m/s)
real(r8) :: precl ! stratiform precip rate (m/s)
real(r8) :: cld(plev)  ! cloud fraction
real(r8) :: cldr(plev)  ! cloud fraction based on -30dBZ radar reflectivity
real(r8) :: cldtop(plev)  ! cloud top pdf
real(r8) :: gicewp(plev)  ! ice water path
real(r8) :: gliqwp(plev)  ! ice water path
real(r8) :: mc(plev)   ! cloud mass flux
real(r8) :: mcup(plev) ! updraft cloud mass flux
real(r8) :: mcdn(plev) ! downdraft cloud mass flux
real(r8) :: mcuup(plev) ! unsat updraft cloud mass flux
real(r8) :: mcudn(plev) ! unsat downdraft cloud mass flux
real(r8) :: crm_qc(plev)  ! mean cloud water
real(r8) :: crm_qi(plev)  ! mean cloud ice
real(r8) :: crm_qs(plev)  ! mean snow
real(r8) :: crm_qg(plev)  ! mean graupel
real(r8) :: crm_qr(plev)  ! mean rain
real(r8) :: flux_qt(plev) ! nonprecipitating water flux
real(r8) :: flux_qp(plev) ! precipitating water flux
real(r8) :: pflx(plev)    ! precipitation flux
real(r8) :: qt_ls(plev) ! tendency of nonprec water due to large-scale
real(r8) :: qt_trans(plev)! tendency of nonprec water due to transport
real(r8) :: qp_trans(plev) ! tendency of prec water due to transport
real(r8) :: qp_fall(plev) ! tendency of prec water due to fall-out
real(r8) :: qp_src(plev) ! tendency of prec water due to conversion
real(r8) :: qp_evp(plev) ! tendency of prec water due to evp
real(r8) :: t_ls(plev) ! tendency of lwse  due to large-scale
real(r8) :: prectend ! column integrated tendency in precipitating water+ice (kg/m2/s)
real(r8) :: precstend ! column integrated tendency in precipitating ice (kg/m2/s)
real(r8) :: precsc ! convective snow rate (m/s)
real(r8) :: precsl ! stratiform snow rate (m/s)
real(r8) :: cltot ! shaded cloud fraction
real(r8) :: clhgh ! shaded cloud fraction
real(r8) :: clmed ! shaded cloud fraction
real(r8) :: cllow ! shaded cloud fraction
real(r8) :: stat_buffer(50)  ! buffer for one-column statistics
real(r8) :: radlwup0(crm_nz)
real(r8) :: radlwdn0(crm_nz)
real(r8) :: radswup0(crm_nz)
real(r8) :: radswdn0(crm_nz)
real(r8) :: radqrlw0(crm_nz)
real(r8) :: radqrsw0(crm_nz)
double precision :: lwnsxy1,swnsxy1,lwntxy1,swntxy1,solinxy1
double precision :: lwnscxy1,swnscxy1,lwntcxy1,swntcxy1,lwdsxy1,swdsxy1


integer i,j,k,m, ncol

real(r8), parameter :: icp = 1./cp
real(r8) om

dt_gl = dtn
nbreak = 1
if(OCEAN) ocnfrac=1.
if(LAND) ocnfrac=0.

radlwup = 0.
radlwdn = 0.
radswup = 0.
radswdn = 0.
radqrlw = 0.
radqrsw = 0.

   ncol = 1 
   dolongwave = .false.
   doshortwave = .false.
   nrad = 1
   

           open(88,file='out.bin',form='unformatted')
           print*,'saved the diagnostics file ...'
           read(88) lchnk, icol, &
                        tl, ql, qcl, qci, ul, vl, &
                       ps, pmid, pdel, phis, &
                       zmid, zint, dt_gl, i, &
                       qltend, qcltend, qcitend, sltend, &
                       u_crm(:,:,:,ncol), v_crm(:,:,:,ncol), w_crm(:,:,:,ncol), &
                       t_crm(:,:,:,ncol), q_crm(:,:,:,ncol), qn_crm(:,:,:,ncol), qp_crm(:,:,:,ncol) ,&
                       qc_crm, qi_crm, qpc_crm, qpi_crm, &
                       prec_crm, qrs_crm, qrl_crm, &
                       fsds_crm, fsns_crm, fsnt_crm, fsut_crm,  &
                       flwds_crm, flns_crm, flut_crm,    &
                       fsntc_crm, fsdsc_crm, flutc_crm, flnsc_crm, &
                       t_rad, qv_rad, qc_rad, qi_rad, &
                       precc, precl, precsc, precsl, &
                       cltot, clhgh, clmed, cllow, &
                       cld, cldr, cldtop, &
                       gicewp, gliqwp, &
                       mc, mcup, mcdn, mcuup, mcudn, &
                       crm_qc, crm_qi, crm_qs, crm_qg, crm_qr, &
                       flux_qt, flux_qp, pflx, qt_ls, &
                       qt_trans, qp_trans, qp_fall, qp_evp, qp_src, t_ls, &
                       prectend, precstend,&
                       nbreak, doinitial, ocnfrac, &
                       wnd, tau00, bflxls, taux_crm, tauy_crm, z0m, timing_factor

print*,i
print*,tl
print*,ql
print*,doinitial
print*,nbreak
print*,wnd,tau00,bflxls
print*,zint

doinitial = .true.
tabs_s = 300.
stat_buffer = 0.

    call crm (lchnk, icol, &
               tl, ql, qcl, qci, ul, vl, &
               ps, pmid, pdel, phis, &
               zmid, zint, dt_gl, plev, &
               qltend, qcltend, qcitend, sltend, &
               u_crm(:,:,:,ncol), v_crm(:,:,:,ncol), w_crm(:,:,:,ncol), &
               t_crm(:,:,:,ncol), q_crm(:,:,:,ncol), qn_crm(:,:,:,ncol), qp_crm(:,:,:,ncol) ,&
               qc_crm, qi_crm, qpc_crm, qpi_crm,  &
               prec_crm, qrs_crm, qrl_crm, &
               fsds_crm, fsns_crm, fsnt_crm, fsut_crm,  &
               flwds_crm, flns_crm, flut_crm,    &
               fsntc_crm, fsdsc_crm, flutc_crm, flnsc_crm, &
               t_rad, qv_rad, qc_rad, qi_rad, &
               precc, precl, precsc, precsl, &
               cltot, clhgh, clmed, cllow, &
               stat_buffer, cld, cldr, cldtop, &
               gicewp, gliqwp,     &
               mc, mcup, mcdn, mcuup, mcudn, &
               crm_qc,crm_qi,crm_qs,crm_qg,crm_qr, &
               flux_qt, flux_qp, pflx, qt_ls, &
               qt_trans, qp_trans, qp_fall, qp_evp, qp_src, t_ls, &
               prectend, precstend, &
               nbreak, doinitial,  ocnfrac, &
               wnd, tau00, bflxls, taux_crm, tauy_crm, z0m, timing_factor)
!               dolongwave, doshortwave, nrad, &
!               0., 0., day, pres0, tabs_s, case, &
!               radlwup0, radlwdn0, radswup0, radswdn0, radqrlw0, radqrsw0, &
!               lwnsxy1,swnsxy1,lwntxy1,swntxy1,solinxy1,lwnscxy1,swnscxy1,lwntcxy1,swntcxy1,lwdsxy1,swdsxy1  &
!               )


end subroutine super

end module super_cup


